require 'rubygems'
require 'builder'
require 'logger'

#
# The FusionCharts module contains the classes used for emitting the XML to
# define graphs and charts to be generated by FusionCharts
#
module FusionCharts

  # The Base chart type
  class Base
    attr_accessor :animated,
                  :baseFont,
                  :baseFontColor,
                  :baseFontSize,
                  :bottomMargin,
                  :canvasBackgroundColor,
                  :canvasBackgroundDepth,
                  :canvasBaseColor,
                  :canvasBaseDepth,
                  :canvasBorderThickness,
                  :canvasBorderColor,
                  :caption,
                  :decimalPrecision,
                  :decimalSeparator,
                  :divisionalLineAlpha,
                  :divisionalLineColor,
                  :divisionalLineDecimalPrecision,
                  :divisionalLineThickness,
                  :formatNumber,
                  :formatNumberScale,
                  :graphBackgroundAlpha,
                  :graphBackgroundAnimation,
                  :graphBackgroundColor,
                  :hoverCaptionBackgroundColor,
                  :hoverCaptionBorderColor,
                  :hoverCaptionSeparator,
                  :leftMargin,
                  :limitsDecimalPrecision,
                  :numberOfDivisionalLines,
                  :numberPrefix,
                  :numberSuffix,
                  :outerCanvasBaseFont,
                  :outerCanvasBaseFontSize,
                  :outerCanvasBaseFontColor,
                  :rightMargin,
                  :rotateNames,
                  :showCanvasBackground,
                  :showCanvasBase,
                  :showDivisionalLineValue,
                  :showHoverCaption,
                  :showLimits,
                  :showNames,
                  :showValues,
                  :subCaption,
                  :thousandSeparator,
                  :topMargin,
                  :xAxisMinValue,
                  :xAxisName,
                  :yAxisMaxValue,
                  :yAxisName,
                  :zeroPlaneAlpha,
                  :zeroPlaneBorderColor,
                  :zeroPlaneColor,
                  :zeroPlaneShowBorder,
                  :lineColor,
                  :lineThickness,
                  :lineAlpha,
                  :showLegend,
                  :showAlternateHorizontalGridColor,
                  :alternateHorizontalGridColor,
                  :alternateHorizontalGridAlpha,
                  :showAreaBorder,
                  :areaBorderThickness,
                  :areaBorderColor,
                  :areaAlpha,
                  :numdivlines,
                  :numvdivlines,

                  # Line Shadow
                  :showShadow,
                  :shadowColor,
                  :shadowThickness,
                  :shadowAlpha,
                  :shadowXShift,
                  :shadowYShift
    
    alias :bgColor :graphBackgroundColor
    alias :bgAlpha :graphBackgroundAlpha
    alias :bgSWF :graphBackgroundAnimation
    alias :canvasBgColor :canvasBackgroundColor
    alias :outCnvBaseFont :outerCanvasBaseFont
    alias :outCnvBaseFontSze :outerCanvasBaseFontSize
    alias :outCnvBaseFontColor :outerCanvasBaseFontColor
    alias :divLineDecimalPrecision :divisionalLineDecimalPrecision
    alias :numdivlines :numberOfDivisionalLines
    alias :divlinecolor :divisionalLineColor
    alias :divLineThickness :divisionalLineThickness
    alias :divLineAlpha :divisionalLineAlpha 
    alias :hoverCapBgColor :hoverCaptionBackgroundColor 
    alias :hoverCapBorderColor :hoverCaptionBorderColor 
    alias :hoverCapSepChar :hoverCaptionSeparator 
    alias :chartLeftMargin :leftMargin 
    alias :chartRightMargin :rightMargin 
    alias :chartTopMargin :topMargin
    alias :chartBottomMargin :bottomMargin
    alias :alternateHGridColor :alternateHorizontalGridColor
    alias :alternateHGridAlpha :alternateHorizontalGridAlpha
    alias :animation :animated
    alias :showCanvasBg :showCanvasBackground
    alias :showDivLineValue :showDivisionalLineValue 
    alias :showAlternateHGridColor :showAlternateHorizontalGridColor 
    
    def initialize
      @@attribute_aliases = { :graphBackGroundColor => "bgColor",
                    :graphBackgroundAlpha => "bgAlpha",
                    :graphBackgroundAnimation => "bgSWF",
                    :canvasBackgroundColor => "canvasBgColor",
                    :outerCanvasBaseFont => "outCnvBaseFont",
                    :outerCanvasBaseFontSize => "outCnvBaseFontSze",
                    :outerCanvasBaseFontColor => "outCnvBaseFontColor",
                    :divisionalLineDecimalPrecision => "divLineDecimalPrecision",
                    :numberOfDivisionalLines => "numdivlines",
                    :divisionalLineColor => "divlinecolor",
                    :divisionalLineThickness => "divLineThickness",
                    :divisionalLineAlpha => "divLineAlpha",
                    :hoverCaptionBackgroundColor => "hoverCapBgColor",
                    :hoverCaptionBorderColor => "hoverCapBorderColor",
                    :hoverCaptionSeparator => "hoverCapSepChar",
                    :leftMargin => "chartLeftMargin",
                    :rightMargin => "chartRightMargin",
                    :topMargin => "chartTopMargin",
                    :bottomMargin => "chartBottomMargin",
                    :alternateHorizontalGridColor => "alternateHGridColor",
                    :alternateHorizontalGridAlpha => "alternateHGridAlpha",
                    :animated => "animation",
                    :showCanvasBackground => "showCanvasBg",
                    :showDivisionalLineValue => "showDivLineValue",
                    :showAlternateHorizontalGridColor => "showAlternateHGridColor"
                  }
    end
    
    #
    # Emit this chart in XML format. Uses reflection on the Base class to
    # decide which attributes to include in the emitted XML. Subclasses that
    # call super() in their to_xml() methods may pass in a collection of its
    # own attributes via the extra_attributes parameter.
    #
    # Also, since the XML emitted by this method represents the outermost
    # element ("<graph/>"), subclasses typically build any inner elements that
    # are specific to their content, then pass in those elements via the
    # inner_xml parameter.
    #
    # TODO: may want to flip the default behavior, and pass in a list of
    # subclassed attributes to reject. Currently, subclasses do their own
    # rejections before calling super(). See SingleSeriesChart for an example
    # of this in action.
    #
    # TODO: this would be easier if Builder implemented a DOM-like interface,
    # where we could manipulate XML at the element level (e.g.,
    # adding/deleting attributes and contained elements) instead of having to
    # generate the whole thing in the right order the first time.
    #
    def to_xml(extra_attributes=nil, inner_xml=nil)
      result = String.new
      builder = Builder::XmlMarkup.new(:target => result, :indent => 2)
      
      # create a reference object of type Base; this will keep the xml emitted
      # for Base objects from including attributes that are introduced in 
      # subclasses
      reference_object = FusionCharts::Base.new
  
      # create an attribute for each instance variable that's been explicitly 
      # assigned a value
      attributes = {}
      instance_variables.each do |iv|
        attribute_name = iv.split("@")[1]
        attribute_name = @@attribute_aliases[attribute_name.to_sym] if @@attribute_aliases.include? attribute_name.to_sym
        
        # if this attribute is defined on Base, include it in the "graph" 
        # element attributes normalize(value) changes a boolean true to "1", 
        # false to "0"; anything it leaves alone
        attributes[attribute_name] = normalize instance_variable_get(iv) if reference_object.respond_to? attribute_name
      end
      
      attributes.merge!(extra_attributes) if extra_attributes
      
      # create the main tag for the chart, wrapping any inner content that was 
      # passed in (for example, for subclassed chart types)
      builder.tag!("graph", attributes) do
        builder << inner_xml if inner_xml
      end
      
      result
    end
    
    # If value is boolean, return "1" (true) or "0" (false). If value is not 
    # boolean, return value unchanged.
    def normalize(value)
      return "1" if value.class == TrueClass
      return "0" if value.class == FalseClass
      return value
    end
  end
end

