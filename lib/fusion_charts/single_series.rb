require 'rubygems'
require 'builder'
require 'logger'

#
# The FusionCharts module contains the classes used for emitting the XML to
# define graphs and charts to be generated by FusionCharts
#
module FusionCharts

  # A chart that includes categories, datasets, and trendlines
  class SingleSeriesChart < Base
    attr_accessor :dataPoints, :trendLines
    attr_accessor :pieRadius, :pieSliceDepth, :pieYScale,
                  :pieBorderThickness, :pieBorderAlpha, :pieFillAlpha,
                  :showAnchors, :anchorSides, :anchorRadius, :anchorBorderColor,
                  :anchorBorderThickness, :anchorBackgroundColor, :anchorBackgroundAlpha,
                  :anchorAlpha
                  
    alias :anchorBgAlpha :anchorBackgroundAlpha
    alias :anchorBgColor :anchorBackgroundColor
    
    def initialize
      super
      @@attribute_aliases.merge!({ :anchorBackgroundAlpha => "anchorBgAlpha",
                                    :anchorBackgroundColor => "anchorBgColor",
                                 })
    end
                
    def to_xml
      inner = String.new
      inner_builder = Builder::XmlMarkup.new(:target => inner, :indent => 2)
      reference_object = FusionCharts::SingleSeriesChart.new

      attributes = {}
      instance_variables.each do |iv|
        attribute_name = iv.split("@")[1]
        attribute_name = @@attribute_aliases[attribute_name.to_sym] if @@attribute_aliases.include? attribute_name.to_sym
        
        # if this attribute is defined on this class, include it in the "graph" element attributes
        attributes[attribute_name] = normalize instance_variable_get(iv) if reference_object.respond_to? attribute_name
      end

      attributes.reject! do |k,v| attributes_to_reject.include? k end
      
      # create the XML for the inner "dataset" element(s)
      dataPoints.each do |dp|
        inner_builder << dp.to_xml
      end
      
      # create the XML for the inner "trendLines" element(s)
      inner_builder.tag!("trendLines") do
        trendLines.each do |trendLine|
          inner_builder << trendLine.to_xml
        end
      end
      
      # create the XML for this chart, including attributes defined in the Base chart type
      # as well as attributes defined in this subclass
      result = super(attributes, inner)
      
      result
    end

    private

    def attributes_to_reject
      %w{ dataPoints trendLines }
    end
  end

end